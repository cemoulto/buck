{namespace python_common}

/***/
{template .srcs_arg}
{call buck.arg}
  {param name: 'srcs' /}
  {param default : '[]' /}
  {param desc}
  The set of <code>.py</code> files included in this library.
  {/param}
{/call}
{/template}

/***/
{template .platform_srcs_arg}
{call buck.arg}
  {param name : 'platform_srcs' /}
  {param default : '[]' /}
  {param desc}
  Python-platform-specific source files. These should be specified as a list of pairs where the first
  element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name
  is matched (as defined in the `python#name` section of `.buckconfig`), and the second element is
  a list of source files.
  {/param}
{/call}
{/template}

/***/
{template .resources_arg}
{call buck.arg}
  {param name: 'resources' /}
  {param default : '[]' /}
  {param desc}
  Static files to be packaged along with the python sources. These resources can be
  accessed at runtime using the <a href="https://pythonhosted.org/setuptools/pkg_resources.html">pkg_resources</a> API.
  {/param}
{/call}
{/template}

/***/
{template .platform_resources_arg}
{call buck.arg}
  {param name : 'platform_resources' /}
  {param default : '[]' /}
  {param desc}
  Python-platform-specific resource files. These should be specified as a list of pairs where the first
  element is an un-anchored regex (in java.util.regex.Pattern syntax) against which the platform name
  is matched (as defined in the `python#name` section of `.buckconfig`), and the second element is a
  list of resource files.
  {/param}
{/call}
{/template}

/***/
{template .base_module_arg}
{call buck.arg}
  {param name: 'base_module' /}
  {param default : 'None' /}
  {param desc}
  The package for which the given specified sources and resources should reside in their final
  location in the top-level binary. If unset, the project relative directory that houses the
  BUCK file is used.
  {/param}
{/call}
{/template}

/***/
{template .platform_arg}
{call buck.arg}
  {param name : 'platform' /}
  {param default : 'None' /}
  {param desc}
  The name of the Python platform to build against by default (as defined in the `python#name` section of `.buckconfig`).
  {/param}
{/call}
{/template}

/***/
{template .linker_flags_arg}
{call buck.arg}
  {param name : 'linker_flags' /}
  {param default : '[]' /}
  {param desc}
  Additional linker flags that should be applied to any links which are specific to this rule.
  Note that whether these flags are used are dependent on the native link strategy selected in
  `.buckconfig` and currently only applies to the `MERGED` link strategy, as the `SEPARATE` link
  strategy pulls in shared libraries linked in the context of their owning rule (e.g. `cxx_library`).
  {/param}
{/call}
{/template}

/***/
{template .package_style_arg}
{call buck.arg}
  {param name : 'package_style' /}
  {param default : 'None' /}
  {param desc}
  Used to override the global packaging style set with {call buckconfig.python_package_style /}.
  {/param}
{/call}
{/template}

/***/
{template .preload_deps_arg}
{call buck.arg}
  {param name : 'preload_deps' /}
  {param default : '[]' /}
  {param desc}
  A list of C/C++ library dependencies that need to be loaded before any other libraries when the
  python binary starts up.  This requires dynamic loader support found on most systems (e.g. `LD_PRELOAD`).
  {/param}
{/call}
{/template}
